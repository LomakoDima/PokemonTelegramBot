import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from config import token
from random import randint
from logic import *
import time
from datetime import datetime, timedelta

bot = telebot.TeleBot(token)


def generate_pokemon_keyboard():
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üßô Wizard", callback_data="choose_wizard"))
    keyboard.add(InlineKeyboardButton("ü•ä Fighter", callback_data="choose_fighter"))
    return keyboard


@bot.message_handler(commands=['start'])
def welcome(message):
    bot.send_message(message.chat.id,
                     "‚ú® –ü—Ä–∏–≤–µ—Ç, —Ç—Ä–µ–Ω–µ—Ä! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –ø–æ–∫–µ–º–æ–Ω–æ–≤! ‚ú®\n–ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")


@bot.message_handler(commands=['help'])
def help_command(message):
    bot.send_message(message.chat.id,
                     "üìú *–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:*\n\nüéÆ /go ‚Äì –í—ã–±—Ä–∞—Ç—å –ø–æ–∫–µ–º–æ–Ω–∞\n‚ÑπÔ∏è /info ‚Äì –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∫–µ–º–æ–Ω–µ\n‚öîÔ∏è /attack ‚Äì –ê—Ç–∞–∫–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ –ø–æ–∫–µ–º–æ–Ω–∞\nüçñ /feed ‚Äì –ü–æ–∫–æ—Ä–º–∏—Ç—å –ø–æ–∫–µ–º–æ–Ω–∞\n‚ù§Ô∏è /heal ‚Äì –í—ã–ª–µ—á–∏—Ç—å –ø–æ–∫–µ–º–æ–Ω–∞ (–¥–æ 2 —Ä–∞–∑)\nüí™ /train ‚Äì –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –ø–æ–∫–µ–º–æ–Ω–∞ (1 —Ä–∞–∑ –≤ –¥–µ–Ω—å)\nüèÜ /leaders ‚Äì –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤",
                     parse_mode="Markdown")


@bot.message_handler(commands=['go'])
def start(message):
    if message.from_user.username not in Pokemon.pokemons.keys():
        bot.send_message(message.chat.id, "üîπ *–í—ã–±–µ—Ä–∏ —Å–≤–æ–µ–≥–æ –ø–æ–∫–µ–º–æ–Ω–∞:*", reply_markup=generate_pokemon_keyboard(),
                         parse_mode="Markdown")
    else:
        bot.reply_to(message, "‚ö†Ô∏è –¢—ã —É–∂–µ —Å–æ–∑–¥–∞–ª —Å–µ–±–µ –ø–æ–∫–µ–º–æ–Ω–∞!")


@bot.callback_query_handler(func=lambda call: call.data.startswith("choose_"))
def choose_pokemon(call):
    username = call.from_user.username
    if username in Pokemon.pokemons:
        bot.answer_callback_query(call.id, "‚ùå –¢—ã —É–∂–µ –≤—ã–±—Ä–∞–ª –ø–æ–∫–µ–º–æ–Ω–∞!")
        return

    if call.data == "choose_wizard":
        pokemon = Wizard(username)
    elif call.data == "choose_fighter":
        pokemon = Fighter(username)

    bot.send_message(call.message.chat.id, f"üéâ *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!* –¢—ã –≤—ã–±—Ä–∞–ª {pokemon.name.capitalize()}!",
                     parse_mode="Markdown")
    bot.send_photo(call.message.chat.id, pokemon.show_img())


@bot.message_handler(commands=['info'])
def info(message):
    if message.from_user.username in Pokemon.pokemons.keys():
        pok = Pokemon.pokemons[message.from_user.username]
        bot.send_message(message.chat.id, f"üìú *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∫–µ–º–æ–Ω–µ:*\n{pok.info()}\nüçó –°—ã—Ç–æ—Å—Ç—å –ø–æ–∫–µ–º–æ–Ω–∞: {pok.hunger}",
                         parse_mode="Markdown")


@bot.message_handler(commands=['attack'])
def attack_pok(message):
    if message.reply_to_message:
        if message.reply_to_message.from_user.username in Pokemon.pokemons.keys() and message.from_user.username in Pokemon.pokemons.keys():
            enemy = Pokemon.pokemons[message.reply_to_message.from_user.username]
            pok = Pokemon.pokemons[message.from_user.username]
            res = pok.attack(enemy)
            bot.send_message(message.chat.id, f"‚öîÔ∏è {res}", parse_mode="Markdown")
        else:
            bot.send_message(message.chat.id, "‚ö†Ô∏è –°—Ä–∞–∂–∞—Ç—å—Å—è –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —Å –ø–æ–∫–µ–º–æ–Ω–∞–º–∏!")
    else:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ß—Ç–æ–±—ã –∞—Ç–∞–∫–æ–≤–∞—Ç—å, –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞!")


@bot.message_handler(commands=['feed'])
def feed_pok(message):
    if message.from_user.username in Pokemon.pokemons.keys():
        pok = Pokemon.pokemons[message.from_user.username]
        bot.send_message(message.chat.id, f"üçñ {pok.feed()}", parse_mode="Markdown")


@bot.message_handler(commands=['heal'])
def heal_pok(message):
    if message.from_user.username in Pokemon.pokemons.keys():
        pok = Pokemon.pokemons[message.from_user.username]
        if pok.hp < 200 and pok.heal_count < 2:
            pok.heal_count += 1
            bot.send_message(message.chat.id, "‚ù§Ô∏è –ü–æ–∫–µ–º–æ–Ω –ø–æ–¥–ª–µ—á–µ–Ω!", parse_mode="Markdown")
        else:
            bot.send_message(message.chat.id, "‚ö†Ô∏è –õ–µ—á–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ!")


@bot.message_handler(commands=['train'])
def train_pok(message):
    if message.from_user.username in Pokemon.pokemons.keys():
        pok = Pokemon.pokemons[message.from_user.username]
        if datetime.now() - pok.last_training >= timedelta(days=1):
            pok.power += 5
            pok.last_training = datetime.now()
            bot.send_message(message.chat.id, f"üí™ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –°–∏–ª–∞ –ø–æ–∫–µ–º–æ–Ω–∞ —É–≤–µ–ª–∏—á–µ–Ω–∞: {pok.power}",
                             parse_mode="Markdown")
        else:
            bot.send_message(message.chat.id, "‚ö†Ô∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è –º–æ–∂–Ω–æ 1 —Ä–∞–∑ –≤ –¥–µ–Ω—å!")


@bot.message_handler(commands=['leaders'])
def leaderboard(message):
    if Pokemon.pokemons:
        leaders = sorted(Pokemon.pokemons.values(), key=lambda p: p.hp, reverse=True)
        leaderboard_text = "üèÜ *–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤:*\n" + "\n".join([f"ü•á {p.pokemon_trainer}: {p.hp} HP" for p in leaders])
        bot.send_message(message.chat.id, leaderboard_text, parse_mode="Markdown")
    else:
        bot.send_message(message.chat.id, "‚ùå –ü–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–∫–µ–º–æ–Ω–æ–≤!", parse_mode="Markdown")


def hunger_timer():
    while True:
        for pok in Pokemon.pokemons.values():
            pok.hunger -= 15
            if pok.hunger < 0:
                pok.hunger = 0
        time.sleep(600)  # 10 –º–∏–Ω—É—Ç


import threading

threading.Thread(target=hunger_timer, daemon=True).start()

bot.infinity_polling(none_stop=True)

