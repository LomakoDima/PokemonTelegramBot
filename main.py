# <--- Main.py | Author: DimaLab, License: MIT --->
import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from config import token
from random import randint
from logic import *
import time
from datetime import datetime, timedelta
import threading

bot = telebot.TeleBot(token)

ATTACK_COOLDOWN = timedelta(seconds=30)

# Main Menu Keyboard
def main_menu_keyboard():
    keyboard = InlineKeyboardMarkup()
    keyboard.add(
        InlineKeyboardButton("üéÆ –í—ã–±—Ä–∞—Ç—å –ø–æ–∫–µ–º–æ–Ω–∞", callback_data="choose_pokemon"),
        InlineKeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∫–µ–º–æ–Ω–µ", callback_data="pokemon_info"),
    )
    keyboard.add(
        InlineKeyboardButton("‚öîÔ∏è –ê—Ç–∞–∫–æ–≤–∞—Ç—å", callback_data="attack"),
        InlineKeyboardButton("üçñ –ü–æ–∫–æ—Ä–º–∏—Ç—å", callback_data="feed"),
    )
    keyboard.add(
        InlineKeyboardButton("‚ù§Ô∏è –í—ã–ª–µ—á–∏—Ç—å", callback_data="heal"),
        InlineKeyboardButton("üí™ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞", callback_data="train"),
    )
    keyboard.add(
        InlineKeyboardButton("üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤", callback_data="leaders"),
        InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–∫–µ–º–æ–Ω–∞", callback_data="quit_game"),
    )
    return keyboard

@bot.message_handler(commands=['start'])
def welcome(message):
    bot.send_message(
        message.chat.id,
        "‚ú® –ü—Ä–∏–≤–µ—Ç, –ü–æ–≤–µ–ª–∏—Ç–µ–ª—å –ø–æ–∫–µ–º–æ–Ω–æ–≤! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –ø–æ–∫–µ–º–æ–Ω–æ–≤! ‚ú®",
        reply_markup=main_menu_keyboard()
    )

@bot.callback_query_handler(func=lambda call: call.data == "choose_pokemon")
def choose_pokemon_menu(call):
    username = call.from_user.username
    if username in Pokemon.pokemons:
        bot.answer_callback_query(call.id, "‚ùå –¢—ã —É–∂–µ –≤—ã–±—Ä–∞–ª –ø–æ–∫–µ–º–æ–Ω–∞!")
    else:
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("üßô Wizard", callback_data="choose_wizard"))
        keyboard.add(InlineKeyboardButton("ü•ä Fighter", callback_data="choose_fighter"))
        #keyboard.add(InlineKeyboardButton("‚öïÔ∏è Healer (–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)", callback_data="choose_healer"))
        bot.send_message(call.message.chat.id, "üîπ *–í—ã–±–µ—Ä–∏ —Å–≤–æ–µ–≥–æ –ø–æ–∫–µ–º–æ–Ω–∞:*", reply_markup=keyboard, parse_mode="Markdown")

@bot.callback_query_handler(func=lambda call: call.data.startswith("choose_"))
def choose_pokemon(call):
    username = call.from_user.username
    if username in Pokemon.pokemons:
        bot.answer_callback_query(call.id, "‚ùå –¢—ã —É–∂–µ –≤—ã–±—Ä–∞–ª –ø–æ–∫–µ–º–æ–Ω–∞!")
        return

    if call.data == "choose_wizard":
        pokemon = Wizard(username)
    elif call.data == "choose_fighter":
        pokemon = Fighter(username)
    #elif call.data == "choose_healer":  (–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)
        #pokemon = Healer(username)

    pokemon.last_attack_time = datetime.now() - ATTACK_COOLDOWN

    bot.send_message(call.message.chat.id, f"üéâ *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!* –¢—ã –≤—ã–±—Ä–∞–ª {pokemon.name.capitalize()}!", parse_mode="Markdown")
    bot.send_photo(call.message.chat.id, pokemon.show_img())

@bot.callback_query_handler(func=lambda call: call.data == "pokemon_info")
def info(call):
    username = call.from_user.username
    if username in Pokemon.pokemons.keys():
        pok = Pokemon.pokemons[username]
        bot.send_message(call.message.chat.id, f"üìú *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∫–µ–º–æ–Ω–µ:*\n{pok.info()}\nüçó –°—ã—Ç–æ—Å—Ç—å –ø–æ–∫–µ–º–æ–Ω–∞: {pok.hunger}", parse_mode="Markdown")

@bot.callback_query_handler(func=lambda call: call.data == "attack")
def attack_pokemon(call):
    bot.send_message(call.message.chat.id, "‚ö†Ô∏è –û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞, —á—Ç–æ–±—ã –∞—Ç–∞–∫–æ–≤–∞—Ç—å!")

@bot.callback_query_handler(func=lambda call: call.data == "feed")
def feed_pokemon(call):
    username = call.from_user.username
    if username in Pokemon.pokemons.keys():
        pok = Pokemon.pokemons[username]
        bot.send_message(call.message.chat.id, f"üçñ {pok.feed()}", parse_mode="Markdown")

@bot.callback_query_handler(func=lambda call: call.data == "heal")
def heal_pokemon(call):
    username = call.from_user.username
    if username in Pokemon.pokemons.keys():
        pok = Pokemon.pokemons[username]
        if pok.hp < 200 and pok.heal_count > 0:
            pok.hp = min(200, pok.hp + 50)
            pok.heal_count -= 1
            bot.send_message(call.message.chat.id, "‚ù§Ô∏è –ü–æ–∫–µ–º–æ–Ω –ø–æ–¥–ª–µ—á–µ–Ω –Ω–∞ 50 HP!", parse_mode="Markdown")
        else:
            bot.send_message(call.message.chat.id, "‚ö†Ô∏è –õ–µ—á–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ! –£ –ø–æ–∫–µ–º–æ–Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ –∏–ª–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ø–æ–ø—ã—Ç–∫–∏.")

@bot.callback_query_handler(func=lambda call: call.data == "train")
def train_pokemon(call):
    username = call.from_user.username
    if username in Pokemon.pokemons.keys():
        pok = Pokemon.pokemons[username]
        if datetime.now() - pok.last_training >= timedelta(days=1):
            pok.power += 5
            pok.last_training = datetime.now()
            bot.send_message(call.message.chat.id, f"üí™ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –°–∏–ª–∞ –ø–æ–∫–µ–º–æ–Ω–∞ —É–≤–µ–ª–∏—á–µ–Ω–∞: {pok.power}", parse_mode="Markdown")
        else:
            bot.send_message(call.message.chat.id, "‚ö†Ô∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è –º–æ–∂–Ω–æ 1 —Ä–∞–∑ –≤ –¥–µ–Ω—å!")

@bot.callback_query_handler(func=lambda call: call.data == "leaders")
def leaderboard(call):
    if Pokemon.pokemons:
        leaders = sorted(Pokemon.pokemons.values(), key=lambda p: p.hp, reverse=True)
        leaderboard_text = "üèÜ *–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤:*\n" + "\n".join([f"ü•á {p.pokemon_trainer}: {p.hp} HP" for p in leaders])
        bot.send_message(call.message.chat.id, leaderboard_text, parse_mode="Markdown")
    else:
        bot.send_message(call.message.chat.id, "‚ùå –ü–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–∫–µ–º–æ–Ω–æ–≤!", parse_mode="Markdown")

@bot.callback_query_handler(func=lambda call: call.data == "quit_game")
def quit_game(call):
    username = call.from_user.username
    if username in Pokemon.pokemons.keys():
        del Pokemon.pokemons[username]
        bot.send_message(call.message.chat.id, "‚ùå –¢—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª —Å–≤–æ–µ–≥–æ –ø–æ–∫–µ–º–æ–Ω–∞ –∏ –≤—ã—à–µ–ª –∏–∑ –∏–≥—Ä—ã!")
    else:
        bot.send_message(call.message.chat.id, "‚ö†Ô∏è –£ —Ç–µ–±—è –Ω–µ—Ç –ø–æ–∫–µ–º–æ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!")


def hunger_timer():
    while True:
        for pok in Pokemon.pokemons.values():
            pok.hunger -= 15
            if pok.hunger < 0:
                pok.hunger = 0
        time.sleep(600)  # 10 –º–∏–Ω—É—Ç

threading.Thread(target=hunger_timer, daemon=True).start()

bot.infinity_polling(none_stop=True)

